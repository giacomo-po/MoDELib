cmake_minimum_required(VERSION 3.1.0)
project(DDomp VERSION 1.0.0 LANGUAGES CXX)

option(BUILD_AS_LIB "ON to build as a static library" OFF)
option(USE_NOISE_GENERATOR "Use fftw to generate the noise" ON)

set(MoDELibRootDir "${CMAKE_CURRENT_SOURCE_DIR}/../..")

set(CMAKE_BUILD_TYPE Release)
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
message("CMAKE_SYSTEM_NAME IS: ${CMAKE_SYSTEM_NAME}")
if(${CMAKE_SYSTEM_NAME} MATCHES Darwin)
  set(CMAKE_CXX_COMPILER "/opt/local/bin/g++-mp-11")
#	set(CMAKE_CXX_FLAGS "-Wall -Wextra -fopenmp -O3 -Ofast")
#elseif(${CMAKE_SYSTEM_NAME} MATCHES Linux)
#	set(CMAKE_CXX_FLAGS "-Wall -Wextra -fopenmp -march=native -O3 -Ofast")
endif()
#set(CMAKE_CXX_FLAGS "-Wall -Wextra -march=native -fopenmp -Ofast -g")
set(CMAKE_CXX_FLAGS "-Wall -Wextra -march=native -fopenmp -Ofast -fPIC -g")
# TODO: remove -g, it might not be necessary if cmake builds DEBUG target

#set(CMAKE_EXPORT_COMPILE_COMMANDS ON) # creates compile_commands.json
#set(CMAKE_VERBOSE_MAKEFILE TRUE)

if(BUILD_AS_LIB)
	add_library(DDomp STATIC)
else()
	add_executable(DDomp DDomp.cpp)
endif()

if(USE_NOISE_GENERATOR)
	find_library(FFTW3_LIBRARIES fftw3)
	message(STATUS "FFTW3_INCLUDE_DIRS: ${FFTW3_INCLUDE_DIRS}")
	message(STATUS "FFTW3_LIBRARY_DIRS: ${FFTW3_LIBRARY_DIRS}")
	set(CMAKE_PREFIX_PATH ${FFTW3_LIBRARY_DIRS})

#	set(FFTWDir "/opt/homebrew/Cellar/fftw/3.3.10/include")
#	set(BOOSTDir "/opt/homebrew/Cellar/boost/1.78.0_1/include/")
#	set(FFTWLIB "/opt/homebrew/Cellar/fftw/3.3.10/lib")
	include_directories(${FFTW3_INCLUDE_DIRS})
	include_directories(${BOOSTDir})
	add_definitions(-D _MODEL_GLIDE_PLANE_NOISE_GENERATOR_)
endif()

find_package(Eigen3 REQUIRED NAMES Eigen3)
list(APPEND DDOMP_LINK_LIBRARIES_LIST Eigen3::Eigen)
include_directories(Eigen3::Eigen)
include_directories(${MoDELibRootDir}/include/Utilities/)
include_directories(${MoDELibRootDir}/include/IO/)
include_directories(${MoDELibRootDir}/include/Math/)
#include_directories(${MoDELibRootDir}/include/MPI/)
include_directories(${MoDELibRootDir}/include/Geometry/)
include_directories(${MoDELibRootDir}/include/Mesh/)
include_directories(${MoDELibRootDir}/include/Lattices/)
include_directories(${MoDELibRootDir}/include/FEM/)
include_directories(${MoDELibRootDir}/include/GlidePlanes/)
include_directories(${MoDELibRootDir}/include/LoopNetwork/)
include_directories(${MoDELibRootDir}/include/Quadrature/)
include_directories(${MoDELibRootDir}/include/ParticleInteraction/)
include_directories(${MoDELibRootDir}/include/DiscreteCrackMechanics/)
include_directories(${MoDELibRootDir}/include/PolycrystallineMaterials/)
include_directories(${MoDELibRootDir}/include/DislocationDynamicsIO/)
include_directories(${MoDELibRootDir}/include/DislocationMicrostructure/)
include_directories(${MoDELibRootDir}/include/DislocationMobilities/)
include_directories(${MoDELibRootDir}/include/DislocationDynamicsBase/)
include_directories(${MoDELibRootDir}/include/DislocationDynamics/)
#include_directories(${MoDELibRootDir}/include/DislocationDynamics/Polycrystals/)
#include_directories(${MoDELibRootDir}/include/DislocationDynamics/ElasticFields/)
#include_directories(${MoDELibRootDir}/include/DislocationDynamics/Visualization/)
#include_directories(${MoDELibRootDir}/include/DislocationDynamics/ElasticFields/)
#include_directories(${MoDELibRootDir}/include/DislocationDynamics/Polycrystals/)
#include_directories(${MoDELibRootDir}/include/DislocationDynamics/Visualization/)
#include_directories(${MoDELibRootDir}/include/vtk/)


add_subdirectory(${MoDELibRootDir}/src/Geometry Geometry)
add_subdirectory(${MoDELibRootDir}/src/Lattices Lattices)
add_subdirectory(${MoDELibRootDir}/src/Mesh Mesh)
add_subdirectory(${MoDELibRootDir}/src/GlidePlanes GlidePlanes)
add_subdirectory(${MoDELibRootDir}/src/DislocationMobilities DDDmobilities)
add_subdirectory(${MoDELibRootDir}/src/DislocationDynamicsIO DDDIO)
add_subdirectory(${MoDELibRootDir}/src/DislocationDynamicsBase DDDBase)
add_subdirectory(${MoDELibRootDir}/src/DislocationMicrostructure DDDmicrostructure)
add_subdirectory(${MoDELibRootDir}/src/PolycrystallineMaterials PolyMaterials)
add_subdirectory(${MoDELibRootDir}/src/DislocationDynamics DDD)
#add_subdirectory(${MoDELibRootDir}/src/vtk VTK)

if(USE_NOISE_GENERATOR)
   list(APPEND DDOMP_LINK_LIBRARIES_LIST ${FFTW3_LIBRARIES})
endif()
target_link_libraries(${PROJECT_NAME} ${DDOMP_LINK_LIBRARIES_LIST})
