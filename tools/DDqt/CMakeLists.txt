cmake_minimum_required(VERSION 3.1.0)
project(DDqt VERSION 1.0.0 LANGUAGES CXX)

option(USE_NOISE_GENERATOR "Use fftw to generate the noise" ON)
list(APPEND CMAKE_PREFIX_PATH "/Applications/Qt/6.1.3/macos/lib/cmake")
set(EigenRootDir "/usr/local/include")
set(MoDELibRootDir "${CMAKE_CURRENT_SOURCE_DIR}/../../")

set(CMAKE_CXX_FLAGS "-Wall -Wextra -march=native -Ofast")
set(CMAKE_BUILD_TYPE Release)
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON)
set(CMAKE_AUTOUIC ON)

add_executable(${PROJECT_NAME} DDqt.cxx)

if(USE_NOISE_GENERATOR)
	find_library(FFTW3_LIBRARIES fftw3 REQUIRED)
	message(STATUS "FFTW3_VERSION: ${FFTW3_VERSION}")
	message(STATUS "FFTW3_INCLUDE_DIRS: ${FFTW3_INCLUDE_DIRS}")
	message(STATUS "FFTW3_LIBRARY_DIRS: ${FFTW3_LIBRARY_DIRS}")
	include_directories(${FFTW3_INCLUDE_DIRS})
	include_directories(${BOOSTDir})
	add_definitions(-D _MODEL_GLIDE_PLANE_NOISE_GENERATOR_)
endif()

find_package(Qt6 COMPONENTS Widgets OpenGL REQUIRED)
message (STATUS "Qt6_VERSION: ${Qt6_VERSION}")
if (NOT Qt6_FOUND)
  message("Skipping DDvtk: ${Qt6_NOT_FOUND_MESSAGE}")
  return()
endif()

find_package(VTK REQUIRED)
message (STATUS "VTK_VERSION: ${VTK_VERSION}")
if (NOT VTK_FOUND)
  message("Skipping DDvtk: ${VTK_NOT_FOUND_MESSAGE}")
  return()
endif()

include_directories(${EigenRootDir})
include_directories(${MoDELibRootDir}/include/DislocationMobilities)
include_directories(${MoDELibRootDir}/include/DislocationDynamicsIO)
include_directories(${MoDELibRootDir}/include/Mesh/)
include_directories(${MoDELibRootDir}/include/FEM/)
include_directories(${MoDELibRootDir}/include/IO)
include_directories(${MoDELibRootDir}/include/Utilities)
include_directories(${MoDELibRootDir}/include/Math/)
include_directories(${MoDELibRootDir}/include/Geometry/)
include_directories(${MoDELibRootDir}/include/vtk/)
include_directories(${MoDELibRootDir}/include/PolycrystallineMaterials/)
include_directories(${MoDELibRootDir}/include/Lattices/)
include_directories(${MoDELibRootDir}/include/GlidePlanes/)
include_directories(${MoDELibRootDir}/include/DislocationDynamicsBase/)


add_subdirectory(${MoDELibRootDir}/src/Geometry Geometry)
add_subdirectory(${MoDELibRootDir}/src/Mesh Mesh)
add_subdirectory(${MoDELibRootDir}/src/Lattices Lattices)
add_subdirectory(${MoDELibRootDir}/src/DislocationDynamicsIO DDDIO)
add_subdirectory(${MoDELibRootDir}/src/GlidePlanes GlidePlanes)
add_subdirectory(${MoDELibRootDir}/src/DislocationMobilities DDDmobilities)
add_subdirectory(${MoDELibRootDir}/src/PolycrystallineMaterials PolyMaterials)
add_subdirectory(${MoDELibRootDir}/src/DislocationDynamicsBase DDDbase)
add_subdirectory(${MoDELibRootDir}/src/vtk vtk)

if(USE_NOISE_GENERATOR)
	target_link_libraries(${PROJECT_NAME} ${VTK_LIBRARIES} Qt6::Widgets Qt6::OpenGL Qt6::Core ${FFTW3_LIBRARIES})
else()
	target_link_libraries(${PROJECT_NAME} ${VTK_LIBRARIES} Qt6::Widgets Qt6::OpenGL Qt6::Core)
endif()
vtk_module_autoinit(TARGETS DDqt MODULES ${VTK_LIBRARIES} )
